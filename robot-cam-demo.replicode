; Simple demo using a real robot with AERA

small:(ont 1) [[SYNC_ONCE now 1 forever root nil]]
large:(ont 1) [[SYNC_ONCE now 1 forever root nil]]

h:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
h_is_a_hand:(mk.val h essence hand 1) |[]
(fact h_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

c:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
c_is_a_camera:(mk.val c essence camera 1) |[]
(fact c_is_a_camera 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

; Hand H has position P.
S0:(cst [] []
   (fact (mk.val H: essence hand :) T0: T1: : :); Changed X to hand.
   (fact (mk.val H: position P: :) T0: T1: : :)
|[]
|[]
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]

start:(pgm [] [] [] []
   (cmd ready ["robot-cam-demo"] 1)
1) |[]
(ipgm start [] RUN_ONCE 0s VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 1]]


; The drive models

m_drive:(mdl [] []
   ; TODO: Get a hand position variable and set it as a goal
   (fact (mk.val h position [0 0 0 0] 1) T0: T1: 1 1)
   (fact run T0: T1: ::)
|[]
|[]
[stdin drives] 1 1 1 0 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; Babble phase

; Move to cube 1
pgm_babbleA_1:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 100ms))
[]
   ; TODO: Set a real position
   (inj [Command:(cmd mov_j [h [0 0 0 0]] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd mov_j [h (vec3 -2.2 0 0)])" []])
1) |[]
(ipgm pgm_babbleA_1 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]


; Move to cube 2
pgm_babbleA_2:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 200ms))
[]
   ; TODO: Set a real position
   (inj [Command:(cmd mov_j [h [0 0 0 0]] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd mov_j [h (vec3 1 0.5 0)])" []])
1) |[]
(ipgm pgm_babbleA_2 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]


; Inject drives

pgm_inject_drive_pass1:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 300ms))
   (<= After (+ this.vw.ijt 4000ms))
[]
   ; The end of the time interval will be used in m_drive as the end of the goal interval.
   (inj [F_run:(fact run After (+ Before 300ms) 1 1) []])
   (inj [G:(goal F_run self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected drive 1" []])
1) |[]
(ipgm pgm_inject_drive_pass1 [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Command to move the robot
pgm_eject_cmd_mov_j:(pgm [] []
   (ptn (fact G:(goal (fact (cmd mov_j [H: P:] :) ::) ::) ::) [])
[]
   ; Only eject non-simulation goals.
   (= (is_sim G) false)
[]
   (cmd mov_j [H P] 1)
1) |[]
(ipgm pgm_eject_cmd_mov_j [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]
